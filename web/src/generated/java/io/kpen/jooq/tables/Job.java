/*
 * This file is generated by jOOQ.
 */
package io.kpen.jooq.tables;


import io.kpen.jooq.Indexes;
import io.kpen.jooq.Keys;
import io.kpen.jooq.Public;
import io.kpen.jooq.tables.records.JobRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Job extends TableImpl<JobRecord> {

    private static final long serialVersionUID = 269806219;

    /**
     * The reference instance of <code>public.job</code>
     */
    public static final Job JOB = new Job();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobRecord> getRecordType() {
        return JobRecord.class;
    }

    /**
     * The column <code>public.job.id</code>.
     */
    public final TableField<JobRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('job_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.job.project_id</code>.
     */
    public final TableField<JobRecord, Integer> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.job.benchmark_name</code>.
     */
    public final TableField<JobRecord, String> BENCHMARK_NAME = createField("benchmark_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.job.spec_name</code>.
     */
    public final TableField<JobRecord, String> SPEC_NAME = createField("spec_name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.job.kprove</code>.
     */
    public final TableField<JobRecord, String> KPROVE = createField("kprove", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.job.semantics</code>.
     */
    public final TableField<JobRecord, String> SEMANTICS = createField("semantics", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.job.request_dt</code>.
     */
    public final TableField<JobRecord, OffsetDateTime> REQUEST_DT = createField("request_dt", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.job.s3_bucket</code>.
     */
    public final TableField<JobRecord, String> S3_BUCKET = createField("s3_bucket", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.job.s3_key</code>.
     */
    public final TableField<JobRecord, String> S3_KEY = createField("s3_key", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.job.spec_filename</code>.
     */
    public final TableField<JobRecord, String> SPEC_FILENAME = createField("spec_filename", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.job.timeout_sec</code>.
     */
    public final TableField<JobRecord, Integer> TIMEOUT_SEC = createField("timeout_sec", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.job.memlimit_mb</code>.
     */
    public final TableField<JobRecord, Integer> MEMLIMIT_MB = createField("memlimit_mb", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.job.processing_dt</code>.
     */
    public final TableField<JobRecord, OffsetDateTime> PROCESSING_DT = createField("processing_dt", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * The column <code>public.job.output_log_s3_key</code>.
     */
    public final TableField<JobRecord, String> OUTPUT_LOG_S3_KEY = createField("output_log_s3_key", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.job.error_log_s3_key</code>.
     */
    public final TableField<JobRecord, String> ERROR_LOG_S3_KEY = createField("error_log_s3_key", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.job.status_code</code>.
     */
    public final TableField<JobRecord, Integer> STATUS_CODE = createField("status_code", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.job.timed_out</code>.
     */
    public final TableField<JobRecord, Boolean> TIMED_OUT = createField("timed_out", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.job.proved</code>.
     */
    public final TableField<JobRecord, Boolean> PROVED = createField("proved", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.job.completed_dt</code>.
     */
    public final TableField<JobRecord, OffsetDateTime> COMPLETED_DT = createField("completed_dt", org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * Create a <code>public.job</code> table reference
     */
    public Job() {
        this(DSL.name("job"), null);
    }

    /**
     * Create an aliased <code>public.job</code> table reference
     */
    public Job(String alias) {
        this(DSL.name(alias), JOB);
    }

    /**
     * Create an aliased <code>public.job</code> table reference
     */
    public Job(Name alias) {
        this(alias, JOB);
    }

    private Job(Name alias, Table<JobRecord> aliased) {
        this(alias, aliased, null);
    }

    private Job(Name alias, Table<JobRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Job(Table<O> child, ForeignKey<O, JobRecord> key) {
        super(child, key, JOB);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.JOB_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<JobRecord, Integer> getIdentity() {
        return Keys.IDENTITY_JOB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<JobRecord> getPrimaryKey() {
        return Keys.JOB_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<JobRecord>> getKeys() {
        return Arrays.<UniqueKey<JobRecord>>asList(Keys.JOB_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Job as(String alias) {
        return new Job(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Job as(Name alias) {
        return new Job(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Job rename(String name) {
        return new Job(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Job rename(Name name) {
        return new Job(name, null);
    }
}
