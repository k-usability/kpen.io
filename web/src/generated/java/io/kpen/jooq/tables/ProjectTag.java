/*
 * This file is generated by jOOQ.
 */
package io.kpen.jooq.tables;


import io.kpen.jooq.Indexes;
import io.kpen.jooq.Keys;
import io.kpen.jooq.Public;
import io.kpen.jooq.tables.records.ProjectTagRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProjectTag extends TableImpl<ProjectTagRecord> {

    private static final long serialVersionUID = -958182826;

    /**
     * The reference instance of <code>public.project_tag</code>
     */
    public static final ProjectTag PROJECT_TAG = new ProjectTag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectTagRecord> getRecordType() {
        return ProjectTagRecord.class;
    }

    /**
     * The column <code>public.project_tag.id</code>.
     */
    public final TableField<ProjectTagRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('project_tag_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.project_tag.project_id</code>.
     */
    public final TableField<ProjectTagRecord, Integer> PROJECT_ID = createField("project_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.project_tag.tag</code>.
     */
    public final TableField<ProjectTagRecord, String> TAG = createField("tag", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.project_tag</code> table reference
     */
    public ProjectTag() {
        this(DSL.name("project_tag"), null);
    }

    /**
     * Create an aliased <code>public.project_tag</code> table reference
     */
    public ProjectTag(String alias) {
        this(DSL.name(alias), PROJECT_TAG);
    }

    /**
     * Create an aliased <code>public.project_tag</code> table reference
     */
    public ProjectTag(Name alias) {
        this(alias, PROJECT_TAG);
    }

    private ProjectTag(Name alias, Table<ProjectTagRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProjectTag(Name alias, Table<ProjectTagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ProjectTag(Table<O> child, ForeignKey<O, ProjectTagRecord> key) {
        super(child, key, PROJECT_TAG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROJECT_TAG_PKEY, Indexes.PROJECT_TAG_PROJECT_ID_TAG_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProjectTagRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROJECT_TAG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjectTagRecord> getPrimaryKey() {
        return Keys.PROJECT_TAG_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjectTagRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjectTagRecord>>asList(Keys.PROJECT_TAG_PKEY, Keys.PROJECT_TAG_PROJECT_ID_TAG_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectTag as(String alias) {
        return new ProjectTag(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectTag as(Name alias) {
        return new ProjectTag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectTag rename(String name) {
        return new ProjectTag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProjectTag rename(Name name) {
        return new ProjectTag(name, null);
    }
}
